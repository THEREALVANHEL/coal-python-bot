import os
import discord
from discord import option
from discord.ext import commands
from pymongo import MongoClient
from dotenv import load_dotenv

ARRIVALS_DEPARTURES_CHANNEL_ID = 1376466361961676920
LOGGING_CHANNEL_ID = 1370987581386391642

# Load environment variables from .env file (for local dev)
load_dotenv()

DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
MONGODB_URI = os.getenv('MONGODB_URI')

# MongoDB setup
mongo_client = MongoClient(MONGODB_URI)
db = mongo_client['coal']  # Database name

# --- CONFIG: Role IDs ---
COOKIE_MANAGER_ROLE_ID = 1372121024841125888
MODERATOR_ROLE_ID = 1371728518467293236
LEAD_MODERATOR_ROLE_ID = 1371147562257748050

JUNIOR_OPERATIVE_ROLE_ID = 1370998669884788788
SENIOR_OPERATIVE_ROLE_ID = 1370999721593671760
ELITE_OPERATIVE_ROLE_ID = 1371000389444305017
BLACK_TIER_OPERATIVE_ROLE_ID = 1371001322131947591
VETERAN_OPERATIVE_ROLE_ID = 1371001806930579518
GHOST_OPERATIVE_ROLE_ID = 1371304693715964005

COOKIE_ROLE_THRESHOLDS = [
    (GHOST_OPERATIVE_ROLE_ID, 5000),
    (VETERAN_OPERATIVE_ROLE_ID, 3000),
    (BLACK_TIER_OPERATIVE_ROLE_ID, 1750),
    (ELITE_OPERATIVE_ROLE_ID, 1000),
    (SENIOR_OPERATIVE_ROLE_ID, 500),
    (JUNIOR_OPERATIVE_ROLE_ID, 100),
]

# --- Cookie System Helpers ---

def get_cookies(user_id):
    user = db.cookies.find_one({"user_id": str(user_id)})
    return user["cookies"] if user and "cookies" in user else 0

def set_cookies(user_id, amount):
    db.cookies.update_one(
        {"user_id": str(user_id)},
        {"$set": {"cookies": int(amount)}},
        upsert=True
    )

def add_cookies(user_id, amount):
    db.cookies.update_one(
        {"user_id": str(user_id)},
        {"$inc": {"cookies": int(amount)}},
        upsert=True
    )

def remove_cookies(user_id, amount):
    current = get_cookies(user_id)
    new_total = max(0, current - int(amount))
    set_cookies(user_id, new_total)

def get_leaderboard(skip=0, limit=10):
    return list(db.cookies.find().sort("cookies", -1).skip(skip).limit(limit))

def get_rank(user_id):
    all_users = list(db.cookies.find().sort("cookies", -1))
    for idx, user in enumerate(all_users, 1):
        if user["user_id"] == str(user_id):
            return idx
    return None

# --- Permission Check Helpers ---

def is_admin_or_cookie_manager(member: discord.Member):
    return (
        member.guild_permissions.administrator or
        any(role.id == COOKIE_MANAGER_ROLE_ID for role in member.roles)
    )

def is_admin_or_moderator(member: discord.Member):
    return (
        member.guild_permissions.administrator or
        any(role.id in [MODERATOR_ROLE_ID, LEAD_MODERATOR_ROLE_ID] for role in member.roles)
    )

# --- Role Update Helper ---

async def update_cookie_roles(member: discord.Member):
    cookies = get_cookies(member.id)
    roles_to_add = []
    roles_to_remove = []
    # Find the highest role the user qualifies for
    qualified_role = None
    for role_id, threshold in COOKIE_ROLE_THRESHOLDS:
        if cookies >= threshold:
            qualified_role = role_id
            break
    # Remove all cookie roles first
    for role_id, _ in COOKIE_ROLE_THRESHOLDS:
        role = member.guild.get_role(role_id)
        if role and role in member.roles:
            roles_to_remove.append(role)
    # Add the new qualified role
    if qualified_role:
        role = member.guild.get_role(qualified_role)
        if role and role not in member.roles:
            roles_to_add.append(role)
    # Remove old roles, add new one
    if roles_to_remove:
        await member.remove_roles(*roles_to_remove, reason="Cookie role update")
    if roles_to_add:
        await member.add_roles(*roles_to_add, reason="Cookie role update")

# --- Warn System Helpers ---

def add_warning(user_id, moderator_id, reason):
    db.warnings.insert_one({
        "user_id": str(user_id),
        "moderator_id": str(moderator_id),
        "reason": reason
    })

def get_warnings(user_id):
    return list(db.warnings.find({"user_id": str(user_id)}))

# --- Bot Setup ---

intents = discord.Intents.default()
intents.members = True  # Needed for member join/leave events
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")
    try:
        await bot.sync_commands()
        print("Slash commands synced.")
    except Exception as e:
        print(f"Error syncing commands: {e}")
@bot.event
async def on_member_join(member):
    channel = member.guild.get_channel(LOG_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="üëã Welcome!",
            description=f"{member.mention} joined the server.",
            color=discord.Color.green(),
            timestamp=member.joined_at
        )
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.add_field(name="User", value=member.name, inline=True)
        embed.add_field(name="Join Date", value=member.joined_at.strftime("%Y-%m-%d %H:%M:%S"), inline=True)
        await channel.send(embed=embed)

@bot.event
async def on_member_remove(member):
    channel = member.guild.get_channel(LOG_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="üëã Goodbye!",
            description=f"{member.mention} left the server.",
            color=discord.Color.red()
        )
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.add_field(name="User", value=member.name, inline=True)
        await channel.send(embed=embed)

@bot.event
async def on_message_edit(before, after):
    if before.author.bot or before.content == after.content:
        return
    channel = before.guild.get_channel(LOG_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="‚úèÔ∏è Message Edited",
            color=discord.Color.orange(),
            timestamp=after.edited_at or discord.utils.utcnow()
        )
        embed.set_author(name=before.author.display_name, icon_url=before.author.display_avatar.url)
        embed.add_field(name="Channel", value=before.channel.mention, inline=False)
        embed.add_field(name="Before", value=before.content or "*empty*", inline=False)
        embed.add_field(name="After", value=after.content or "*empty*", inline=False)
        await channel.send(embed=embed)

@bot.event
async def on_message_delete(message):
    if message.author.bot:
        return
    channel = message.guild.get_channel(LOG_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="üóëÔ∏è Message Deleted",
            color=discord.Color.red(),
            timestamp=discord.utils.utcnow()
        )
        embed.set_author(name=message.author.display_name, icon_url=message.author.display_avatar.url)
        embed.add_field(name="Channel", value=message.channel.mention, inline=False)
        embed.add_field(name="Content", value=message.content or "*empty*", inline=False)
        await channel.send(embed=embed
# --- /ping Command ---
@bot.slash_command(name="ping", description="Check if the bot is alive.")
async def ping(ctx):
    await ctx.respond("Pong!")

# --- /cookies Command ---
@bot.slash_command(name="cookies", description="Show how many cookies you or another user have.")
@option("user", description="User to check", required=False)
async def cookies(ctx, user: discord.Member = None):
    user = user or ctx.author
    total = get_cookies(user.id)
    await ctx.respond(f"{user.mention} has {total} üç™ cookies.")

# --- /addcookies Command ---
@bot.slash_command(name="addcookies", description="Add cookies to a user (admin/Cookie Manager only).")
@option("user", description="User to add cookies to", required=True)
@option("amount", description="Amount of cookies to add", required=True)
async def addcookies(ctx, user: discord.Member, amount: int):
    if not is_admin_or_cookie_manager(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    add_cookies(user.id, amount)
    total = get_cookies(user.id)
    await update_cookie_roles(user)
    await ctx.respond(f"Added {amount} üç™ to {user.mention}. They now have {total} cookies.")

# --- /removecookies Command ---
@bot.slash_command(name="removecookies", description="Remove cookies from a user (admin/Cookie Manager only).")
@option("user", description="User to remove cookies from", required=True)
@option("amount", description="Amount of cookies to remove", required=True)
async def removecookies(ctx, user: discord.Member, amount: int):
    if not is_admin_or_cookie_manager(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    remove_cookies(user.id, amount)
    total = get_cookies(user.id)
    await update_cookie_roles(user)
    await ctx.respond(f"Removed {amount} üç™ from {user.mention}. They now have {total} cookies.")

# --- /cookiesgiveall Command ---
@bot.slash_command(name="cookiesgiveall", description="Give cookies to everyone in the server (admin/Cookie Manager only).")
@option("amount", description="Amount of cookies to give to everyone", required=True)
async def cookiesgiveall(ctx, amount: int):
    if not is_admin_or_cookie_manager(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    count = 0
    for member in ctx.guild.members:
        if not member.bot:
            add_cookies(member.id, amount)
            await update_cookie_roles(member)
            count += 1
    await ctx.respond(f"Gave {amount} üç™ to {count} members!")

# --- /cookiesreset Command ---
@bot.slash_command(name="cookiesreset", description="Reset all cookies to zero (admin/Cookie Manager only).")
async def cookiesreset(ctx):
    if not is_admin_or_cookie_manager(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    db.cookies.update_many({}, {"$set": {"cookies": 0}})
    # Remove all cookie roles from all members
    for member in ctx.guild.members:
        roles_to_remove = []
        for role_id, _ in COOKIE_ROLE_THRESHOLDS:
            role = member.guild.get_role(role_id)
            if role and role in member.roles:
                roles_to_remove.append(role)
        if roles_to_remove:
            await member.remove_roles(*roles_to_remove, reason="Cookie reset")
    await ctx.respond("All cookies have been reset to zero and roles removed.")

# --- /cookiesrank Command ---
@bot.slash_command(name="cookiesrank", description="Show your or another user's rank in the cookies leaderboard.")
@option("user", description="User to check", required=False)
async def cookiesrank(ctx, user: discord.Member = None):
    user = user or ctx.author
    rank = get_rank(user.id)
    if rank:
        await ctx.respond(f"{user.mention} is ranked #{rank} in cookies!")
    else:
        await ctx.respond(f"{user.mention} is not ranked yet.")

# --- /top Command ---
@bot.slash_command(name="top", description="Show the cookie leaderboard (10 per page).")
@option("page", description="Leaderboard page", required=False)
async def top(ctx, page: int = 1):
    per_page = 10
    skip = (page - 1) * per_page
    leaderboard = get_leaderboard(skip, per_page)
    if not leaderboard:
        await ctx.respond("No data for this page.")
        return
    msg = f"**üç™ Cookie Leaderboard (Page {page})**\n"
    for idx, user in enumerate(leaderboard, start=skip + 1):
        user_id = int(user['user_id'])
        member = ctx.guild.get_member(user_id)
        name = member.mention if member else f"<@{user_id}>"
        msg += f"{idx}. {name}: {user['cookies']} cookies\n"
    await ctx.respond(msg)

# --- /roleupdate Command ---
@bot.slash_command(name="roleupdate", description="Update your cookie role based on your cookies.")
async def roleupdate(ctx):
    await update_cookie_roles(ctx.author)
    await ctx.respond("Your cookie role has been updated!", ephemeral=True)

# --- /modclear Command ---
@bot.slash_command(name="modclear", description="Clear a specific number of messages in this channel (mod/admin only).")
@option("amount", description="Number of messages to delete (max 100)", required=True)
async def modclear(ctx, amount: int):
    if not is_admin_or_moderator(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    if amount < 1 or amount > 100:
        await ctx.respond("Please specify an amount between 1 and 100.", ephemeral=True)
        return
    await ctx.channel.purge(limit=amount)
    await ctx.respond(f"Deleted {amount} messages.", ephemeral=True)

# --- /warn Command ---
@bot.slash_command(name="warn", description="Warn a user (mod/admin only).")
@option("user", description="User to warn", required=True)
@option("reason", description="Reason for warning", required=False)
async def warn(ctx, user: discord.Member, reason: str = "No reason provided"):
    if not is_admin_or_moderator(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    add_warning(user.id, ctx.author.id, reason)
    await ctx.respond(f"{user.mention} has been warned. Reason: {reason}")

# --- /warnlist Command ---
@bot.slash_command(name="warnlist", description="Show all warnings for a user (mod/admin only).")
@option("user", description="User to check", required=True)
async def warnlist(ctx, user: discord.Member):
    if not is_admin_or_moderator(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    warnings = get_warnings(user.id)
    if not warnings:
        await ctx.respond(f"{user.mention} has no warnings.")
        return
    msg = f"Warnings for {user.mention}:\n"
    for idx, w in enumerate(warnings, 1):
        mod = ctx.guild.get_member(int(w['moderator_id']))
        mod_name = mod.mention if mod else f"<@{w['moderator_id']}>"
        msg += f"{idx}. By {mod_name}: {w['reason']}\n"
    await ctx.respond(msg)

if __name__ == "__main__":
    if not DISCORD_TOKEN or not MONGODB_URI:
        print("Please set DISCORD_TOKEN and MONGODB_URI in your environment.")
    else:
        bot.run(DISCORD_TOKEN)
# --- /clearwarnlist Command ---
@bot.slash_command(name="clearwarnlist", description="Clear all warnings for a user (mod/admin only).")
@option("user", description="User to clear warnings for", required=True)
async def clearwarnlist(ctx, user: discord.Member):
    if not is_admin_or_moderator(ctx.author):
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    db.warnings.delete_many({"user_id": str(user.id)})
    await ctx.respond(f"All warnings for {user.mention} have been cleared.")

# --- /announcement Command ---
@bot.slash_command(name="announcement", description="Send an announcement to a channel (admin only).")
@option("channel", description="Channel to send the announcement in", required=True)
@option("message", description="The announcement message", required=True)
async def announcement(ctx, channel: discord.TextChannel, message: str):
    if not ctx.author.guild_permissions.administrator:
        await ctx.respond("You do not have permission to use this command.", ephemeral=True)
        return
    embed = discord.Embed(
        title="üì¢ Announcement",
        description=message,
        color=discord.Color.blue()
    )
    embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.display_avatar.url)
    await channel.send(embed=embed)
    await ctx.respond(f"Announcement sent in {channel.mention}!", ephemeral=True)
